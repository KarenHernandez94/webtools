/* global libVal, roleDefinitions */
window.addEventListener('message', events, false);

function events(evt) {

   if (evt.origin !== "https://widgets.lcs.brightspace.com" && evt.origin !== "https://widgets.lcs-dev.brightspace.com" && evt.origin !== "https://cdn.lcs.brightspace.com" && evt.origin !== "https://cdn.lcs-dev.brightspace.com")

      return;

   var data = {}
   try {
      data = JSON.parse(evt.data);
   } catch (e) {
      return false;
   }
   var subject = data.subject;
   var ifrm = document.getElementById(context.id).querySelector('iframe');

   switch (subject) {
      case "goToUrl":
         window.top.location.href = data.message.url;
         break;

      case "frameResize":
         ifrm.style.height = data.message;
         break;

      case "getReplaceStrings":
         ifrm.contentWindow.postMessage(JSON.stringify({ subject: "doneGetReplaceStrings", message: context }), evt.origin);
         break;

      case "getUseRoleAlias":
         if (typeof useRoleAlias !== 'undefined') {
            ifrm.contentWindow.postMessage(JSON.stringify({ subject: "doneGetUseRoleAlias", message: useRoleAlias }), evt.origin);
         }
         else {
            ifrm.contentWindow.postMessage(JSON.stringify({ subject: "doneGetUseRoleAlias", message: false }), evt.origin);
         }
         break;

      case "getRoleDefinitions":
         ifrm.contentWindow.postMessage(JSON.stringify({ subject: "doneGetRoleDefinitions", message: roleDefinitions }), evt.origin);
         break;

      case "getWidgetConfig":
         ifrm.contentWindow.postMessage(JSON.stringify({ subject: "doneGetWidgetConfig", message: config }), evt.origin);
         break;

      case "getLangTerms":
         ifrm.contentWindow.postMessage(JSON.stringify({ subject: "doneGetLangTerms", message: lang }), evt.origin);
         break;
      case "getHTMLAttribute":
         ifrm.contentWindow.postMessage(JSON.stringify({ subject: "doneGetHTMLAttribute", message: document.querySelector("html").getAttribute(data.message.route), attribute: data.message.route }), evt.origin);
         break;
      case "getConfig":
         var configDataPath = data.message;
         var options = {};
         if (data.noCache) {
            var ts = new Date().getTime();
            options = { _: ts };
         }

         // Convert special HTML encoded chars (e.g. turn &#227; into useable encoded chars like Ã£)
         configDataPath = decodeString(configDataPath);

         if (window.jQuery) {
            $.getJSON(configDataPath, options, function (hdata) {
               ifrm.contentWindow.postMessage(JSON.stringify({ subject: "doneGetConfig", message: { success: true, data: hdata } }), evt.origin);
   
            }).fail(function () {
               ifrm.contentWindow.postMessage(JSON.stringify({ subject: "doneGetConfig", message: { success: false, data: {} } }), evt.origin);
            });
         } else {
            // if jQuery has not yet loaded, retry this event after 500ms
            setTimeout(() => {
               ifrm.contentWindow.postMessage(JSON.stringify({ subject: "retryGetConfig", message: { success: false, data: {} } }), evt.origin);
            }, 500);
         }

         break;

      case "getCustomLang":

         var langDataPath = data.message;
         var langOptions = {};

         if (data.noCache) {
            var ts = new Date().getTime();
            langOptions = { _: ts };
         }

         $.getJSON(langDataPath, langOptions, function (hdata) {
            ifrm.contentWindow.postMessage(JSON.stringify({ subject: "doneGetCustomLang", message: { success: true, data: hdata } }), evt.origin);

         }).fail(function () {
            ifrm.contentWindow.postMessage(JSON.stringify({ subject: "doneGetCustomLang", message: { success: false, data: {} } }), evt.origin);
         });

         break;

      case "getFramePosition":
         ifrm.contentWindow.postMessage(JSON.stringify({ subject: "doneGetFramePosition", message: getFramePosition() }), evt.origin);
         break;

      case "addEventListener":

         var id = data.message.id;
         var event = data.message.event;

         switch (event) {
            case "click":
               $('#' + id, window.top.document).click(function () {
                  ifrm.contentWindow.postMessage(JSON.stringify({ subject: "eventFired", message: { id: this.id } }), evt.origin);
               });
               break;

            case "scroll":
               $(window.top).on('scroll', function () {
                  ifrm.contentWindow.postMessage(JSON.stringify({ subject: "scrollFired", message: getFramePosition() }), evt.origin)
               });
         }
         break;

      case "setFrameTitle":
         ifrm.setAttribute('title', data.message.title);
         break;

      case "setHTML":
         $(data.message.selector, window.top.document).html(data.message.htmlString);
         break;

      case "appendHTML":
         var element = $(data.message.datastring);
         var tagname = data.message.tagname;
         var id = data.message.id;

         $(window.top.document.getElementsByTagName(tagname)[0]).append(element);
         ifrm.contentWindow.postMessage(JSON.stringify({ subject: "doneAppendHTML", message: { success: true, id: id } }), evt.origin);

         break;

      case "writeGlobalObject":
         window.top[data.message.name] = data.message.object;
         ifrm.contentWindow.postMessage(JSON.stringify({ subject: "doneWriteGlobalObject", message: { success: true, id: id } }), evt.origin);
         break;

      case "changeVisibility":
         switch (data.message.state) {
            case 'show':
               $(data.message.selector, window.top.document).fadeIn(data.message.interval, function () {
                  if (data.message.focus) {
                     setTimeout(function () { $(data.message.selector, window.top.document).focus(); }, 200);
                  }
               });
               ifrm.contentWindow.postMessage(JSON.stringify({ subject: "doneVisibilityChange", message: { 'selector': data.message.selector, 'state': data.message.state } }), evt.origin);
               break;
            case 'hide':
               $(data.message.selector, window.top.document).fadeOut(data.message.interval);
               ifrm.contentWindow.postMessage(JSON.stringify({ subject: "doneVisibilityChange", message: { 'selector': data.message.selector, 'state': data.message.state } }), evt.origin);
               break;
            case 'hideNoDismiss':
               $(data.message.selector, window.top.document).fadeOut(data.message.interval);
               ifrm.contentWindow.postMessage(JSON.stringify({ subject: "doneVisibilityChange", message: { 'selector': data.message.selector, 'state': data.message.state } }), evt.origin);
               break;
         }
         break;

      case "focusElement":
         $(data.message.selector, window.top.document).focus();
         break;

      case "setCss":
         $(data.message.selector, window.top.document).css(data.message.cssObj);
         break;

      case "addClass":
         $(data.message.selector, window.top.document).addClass(data.message.className);
         break;

      case "removeClass":
         $(data.message.selector, window.top.document).removeClass(data.message.className);
         break;

      case "trapFocus":
         var focusableEls = $(data.message.selector, window.top.document).find('a[href]:not([disabled]):not([style*="display: none;"]), button:not([disabled]):not([style*="display: none;"]), textarea:not([disabled]):not([style*="display: none;"]), input[type="text"]:not([disabled]):not([style*="display: none;"]), input[type="radio"]:not([disabled]):not([style*="display: none;"]), input[type="checkbox"]:not([disabled]):not([style*="display: none;"]), select:not([disabled]):not([style*="display: none;"])');
         var firstFocusableEl = focusableEls[0];  
         var lastFocusableEl = focusableEls[focusableEls.length - 1];
         var KEYCODE_TAB = 9;

         $(lastFocusableEl).keydown(function(e) {
            var isTabPressed = (e.key === 'Tab' || e.keyCode === KEYCODE_TAB);

            if (isTabPressed && !e.shiftKey) { 
               firstFocusableEl.focus();
               e.preventDefault();
            }
         });

         $(firstFocusableEl).keydown(function(e) {
            var isTabPressed = (e.key === 'Tab' || e.keyCode === KEYCODE_TAB);

            if (isTabPressed && e.shiftKey) { 
               lastFocusableEl.focus();
               e.preventDefault();
            }
         });
         break;

      case "doValenceRequest":
         var valenceData = {};

         valenceData.route = data.message.route;
         valenceData.data = data.message.data;

         switch (valenceData.route) {
            case "getWhoAmI":
               libVal.get.whoami(doneValence, { origin: evt.origin, route: valenceData.route, data: valenceData.data });
               break;

            case "getCourseParents":
               libVal.get.courseParents(valenceData.data, doneValence, { origin: evt.origin, route: valenceData.route, data: valenceData.data });
               break;

            case "getNews":
               libVal.get.news(context.orgUnit.id, undefined, doneValence, { origin: evt.origin, route: valenceData.route, data: valenceData.data });
               break;
            case "dismissNewsItem":
               libVal.post.newsItemDismissal(valenceData.data.ouId, valenceData.data.newsItemId);
               break;

            case "getRoot":
               libVal.get.root(context.orgUnit.id, doneValence, { origin: evt.origin, route: valenceData.route, data: valenceData.data });
               break;

            case "getTOC":
               libVal.get.toc(context.orgUnit.id, (valenceData.data.queryParams ? valenceData.data.queryParams : {}), doneValence, { origin: evt.origin, route: valenceData.route, data: valenceData.data });
               break;

            case "getModule":
               libVal.get.module(context.orgUnit.id, valenceData.data.ModuleId, doneValence, { origin: evt.origin, route: valenceData.route, data: valenceData.data });
               break;

            case "getMyCount":
               let myCountOUID = context.orgUnit.id;
               if (valenceData.data.OrgUnitId !== undefined) myCountOUID = valenceData.data.OrgUnitId;
                
               libVal.get.myCount(myCountOUID, valenceData.data, doneValence, { origin: evt.origin, route: valenceData.route, data: valenceData.data }, true);
               break;

            case "getMyProfile":
               libVal.get.myProfile(doneValence, { origin: evt.origin, route: valenceData.route, data: valenceData.data });
               break;

            case "getAssociations":
               libVal.get.associations(context.orgUnit.id, (valenceData.data.queryParams ? valenceData.data.queryParams : {}), doneValence, { origin: evt.origin, route: valenceData.route, data: valenceData.data });
               break;

            case "getIssuedAwards":
               libVal.get.userIssuedAwards(valenceData.data.userId, (valenceData.data.queryParams ? valenceData.data.queryParams : {}), doneValence, { origin: evt.origin, route: valenceData.route, data: valenceData.data });
               break;

            case "getAwards":
               libVal.get.awards(valenceData.data.queryParams, doneValence, { origin: evt.origin, route: valenceData.route, data: valenceData.data });
               break;

            case "getRecent":
               libVal.get.recent(context.orgUnit.id, doneValence, { origin: evt.origin, route: valenceData.route, data: valenceData.data });
               break;

            case "getOrgParents":
               libVal.get.orgParents(data.message.orgUnitId, {}, doneValence, { origin: evt.origin, route: valenceData.route, data: valenceData.data });
               break;

            case "updateProfileById":
               libVal.put.updateProfileById(valenceData.data.profileId, valenceData.data.profileData);
               break;

            case "uploadFile":
               valenceData.origin = evt.origin;
               createModule(valenceData);
               break;

            case "getMyCalendarEvents":
               libVal.get.myEvents(valenceData.data, doneValence, { origin: evt.origin, route: valenceData.route, data: valenceData.data })
               break;

            case "getEnrollments":
               libVal.get.myEnrollments((valenceData.data.queryParams ? valenceData.data.queryParams : {}), doneValence, { origin: evt.origin, route: valenceData.route, data: valenceData.data });
               break;

            case "getTopic":
               libVal.get.topics(context.orgUnit.id, valenceData.data.topicId, doneValence, { origin: evt.origin, route: valenceData.route, data: valenceData.data });
               break;

            case "getWidgetData":
               libVal.get.widgetData(context.orgUnit.id, context.widgetId.replace(/,/g, ''), doneValence, { origin: evt.origin, route: valenceData.route, data: valenceData.data }, true);
               break;

            case "getWidgetDataConfig":
               libVal.get.widgetData(context.orgUnit.id, context.widgetId.replace(/,/g, ''), doneValence, { origin: evt.origin, route: valenceData.route, data: valenceData.data }, true);
               break;

            case "deleteWidgetDataConfig":
               libVal.delete.widgetData(context.orgUnit.id, context.widgetId.replace(/,/g, ''), doneValence, { origin: evt.origin, route: valenceData.route, data: valenceData.data }, true);
               break;

            case "deleteWidgetDataConfigOrg":
               libVal.delete.widgetData(context.org.id, context.widgetId.replace(/,/g, ''), doneValence, { origin: evt.origin, route: valenceData.route, data: valenceData.data }, true);
               break;

            case "getWidgetDataConfigOrg":
               libVal.get.widgetData(context.org.id, context.widgetId.replace(/,/g, ''), doneValence, { origin: evt.origin, route: valenceData.route, data: valenceData.data }, true);
               break;

            case "getMyWidgetData":
               libVal.get.myWidgetData(context.orgUnit.id, context.widgetId.replace(/,/g, ''), doneValence, { origin: evt.origin, route: valenceData.route, data: valenceData.data }, true);
               break;
            case "getOrgWidgetData":
               let thisOrgUnit = context.orgUnit.id;
               if (valenceData.data.OrgUnitId !== undefined) {
                  thisOrgUnit = valenceData.data.OrgUnitId;
               }
               libVal.get.widgetData(thisOrgUnit, context.widgetId.replace(/,/g, ''), doneValence, { origin: evt.origin, route: valenceData.route, data: valenceData.data }, true);
               break;
            case "getCourseWidgetData":
               libVal.get.widgetData(context.orgUnit.id, context.widgetId.replace(/,/g, ''), doneValence, { origin: evt.origin, route: valenceData.route, data: valenceData.data }, true);
               break;
            case "updateWidgetData":
               libVal.put.widgetData(context.orgUnit.id, context.widgetId.replace(/,/g, ''), valenceData.data.widgetData, doneValence, { origin: evt.origin, route: valenceData.route, data: valenceData.data });
               break;

            case "updateOrgWidgetData":
               libVal.put.widgetData(valenceData.data.OrgUnitId, context.widgetId.replace(/,/g, ''), valenceData.data.widgetData, doneValence, { origin: evt.origin, route: valenceData.route, data: valenceData.data });
               break;

            case "updateWidgetDataOrg":
               libVal.put.widgetData(context.org.id, context.widgetId.replace(/,/g, ''), valenceData.data.widgetData, doneValence, { origin: evt.origin, route: valenceData.route, data: valenceData.data }, true);
               break;

            case "saveCourseWidgetData":
               libVal.put.widgetData(context.orgUnit.id, context.widgetId.replace(/,/g, ''), valenceData.data.widgetData, doneValence, { origin: evt.origin, route: valenceData.route, data: valenceData.data });
               break;

            case "updateMyWidgetData":
               libVal.put.myWidgetData(context.orgUnit.id, context.widgetId.replace(/,/g, ''), valenceData.data.myWidgetData, doneValence, { origin: evt.origin, route: valenceData.route, data: valenceData.data });
               break;

            case "getClasslist":
               libVal.get.classlist(context.orgUnit.id, doneValence, { origin: evt.origin, route: valenceData.route, data: valenceData.data })
               break;

            case "getOrgRoles":
               libVal.get.rolesOrg(data.message.data.OrgUnitId, doneValence, { origin: evt.origin, route: valenceData.route, data: valenceData.data })
               break;

            case "getOrgInfo":
               libVal.get.OrgInfo(doneValence, { origin: evt.origin, route: valenceData.route, data: valenceData.data });
               break;
            case "getUserProfile":
               //profileId, callback, storage
               libVal.get.profileUser(data.message.data.id, doneValence, { origin: evt.origin, route: valenceData.route, data: valenceData.data, editmode: data.message.editMode })
               break;

            case "getUserProfileImage":
               /*userId, query, callback, storage*/
               libVal.get.profileImageUser(data.message.data.userID, doneValence, { origin: evt.origin, route: valenceData.route, data: valenceData.data })
               break;

            case "getToken":
               libVal.post.token(doneValence, { origin: evt.origin, route: valenceData.route, data: valenceData.data })
               break;

            case "postUpdateUserImMapping":
               libVal.post.updateUserImMapping(valenceData.data.token, (valenceData.data.queryParams ? valenceData.data.queryParams : {}), doneValence, { origin: evt.origin, route: valenceData.route, data: valenceData.data });
               break;

            case "getCourseImage":
               libVal.get.courseImage(context.orgUnit.id, (valenceData.data.queryParams ? valenceData.data.queryParams : {}), doneValence, { origin: evt.origin, route: valenceData.route, data: valenceData.data });
         }
      default:
      //do something else
   }
}

function doneValence(returnData, dataArgument) {
   var ifrm = document.getElementById(context.id).querySelector('iframe');
   if (dataArgument.editmode !== undefined) {
      ifrm.contentWindow.postMessage(JSON.stringify({ subject: "doneValenceRequest", message: { data: returnData, route: dataArgument.route, dataArgument: dataArgument.data, editmode: dataArgument.editmode } }), dataArgument.origin);
   } else {
      ifrm.contentWindow.postMessage(JSON.stringify({ subject: "doneValenceRequest", message: { data: returnData, route: dataArgument.route, dataArgument: dataArgument.data } }), dataArgument.origin);
   }
}

function createModule(storage) {
   var moduleData = {
      Title: 'temp' + Date.now(),
      ShortTitle: 'temp',
      Type: 0,
      ModuleStartDate: null,
      ModuleEndDate: null,
      IsHidden: true,
      IsLocked: false
   };

   libVal.post.module(context.orgUnit.id, JSON.stringify(moduleData), createTopic, storage);
}

function createTopic(response, storage) {
   var moduleID = response.Id;
   storage.moduleID = moduleID;

   sendMultipartMixed(storage.data.template, storage.data.filedata, storage.data.filename, moduleID, storage);
}

function sendMultipartMixed(tpl, data, filename, moduleID, storage) {
   var ftypeExt, fdata, dataStr;
   var fpath = 'custom_widgets/' + context.name + '/';
   var temp = templates[tpl];

   if (data.indexOf(';base64') > -1) {
      ftypeExt = data.split(';base64')[0].split(':')[1];
      fdata = data.split(';base64,')[1];
      fpath += 'img/' + filename;
   }
   else {
      ftypeExt = 'text/plain';
      fdata = data;
      fpath += filename;
   }

   dataStr = temp.replace('fname', filename).replace('ftype', ftypeExt).replace('furl', fpath).replace('fdata', fdata);

   libVal.post.topic(context.orgUnit.id, moduleID, dataStr, { 'base64': true }, deleteModule, storage);
}

function deleteModule(response, storage) {
   libVal.delete.module(context.orgUnit.id, storage.moduleID, finishUpload, storage);
}

function finishUpload(response, storage) {
   doneValence(storage.data, storage);
}

function getFramePosition() {
   var obj = {};
   obj.innerHeight = window.top.innerHeight;
   obj.scrollTop = $(window.top).scrollTop();
   obj.iFrameTop = $($('[name="' + window.name + '"]', window.top.document)[0]).offset().top;

   return obj;
}

function decodeString(stringInput) {
   var newStringTemp = document.createElement('textarea');
   newStringTemp.innerHTML = stringInput;

   var newString = newStringTemp.value;
   return newString;
}